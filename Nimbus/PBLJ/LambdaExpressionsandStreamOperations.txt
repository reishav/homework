import java.util.*;
import java.util.stream.Collectors;

// ---------------- Part A: Employee class ----------------
class Employee {
    String name;
    int age;
    double salary;

    public Employee(String name, int age, double salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Age: " + age + ", Salary: " + salary;
    }
}

// ---------------- Part B: Student class ----------------
class Student {
    String name;
    double marks;

    public Student(String name, double marks) {
        this.name = name;
        this.marks = marks;
    }
}

// ---------------- Part C: Product class ----------------
class Product {
    String name;
    double price;
    String category;

    public Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    @Override
    public String toString() {
        return name + " (" + category + "): " + price;
    }
}

// ---------------- Main Program ----------------
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int choice = -1; // initialize to enter loop

        do {
            System.out.println("\n---Lambda & Stream Menu ---");
            System.out.println("1. Sort Employees (Lambda Expressions)");
            System.out.println("2. Filter & Sort Students (Streams)");
            System.out.println("3. Product Stream Operations");
            System.out.println("0. Exit");
            System.out.print("Enter choice: ");

            if (!sc.hasNextInt()) {
                sc.next(); // discard invalid input
                System.out.println("Invalid input. Enter a number:");
                continue;
            }
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    sortEmployees(sc);
                    break;
                case 2:
                    filterSortStudents(sc);
                    break;
                case 3:
                    productStreamOperations(sc);
                    break;
                case 0:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice! Try again.");
            }

        } while (choice != 0);

        sc.close();
    }

    // ---------------- Part A: Sorting Employees ----------------
    private static void sortEmployees(Scanner sc) {
        List<Employee> employees = new ArrayList<>();
        System.out.println("\nEnter number of employees:");
        int n = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < n; i++) {
            System.out.println("Enter Employee " + (i + 1) + " Name:");
            String name = sc.nextLine();
            System.out.println("Enter Age:");
            int age = sc.nextInt();
            System.out.println("Enter Salary:");
            double salary = sc.nextDouble();
            sc.nextLine(); // consume newline
            employees.add(new Employee(name, age, salary));
        }

        // Sort by name
        employees.sort((e1, e2) -> e1.name.compareToIgnoreCase(e2.name));
        System.out.println("\nSorted by Name:");
        employees.forEach(System.out::println);

        // Sort by age
        employees.sort(Comparator.comparingInt(e -> e.age));
        System.out.println("\nSorted by Age:");
        employees.forEach(System.out::println);

        // Sort by salary descending
        employees.sort((e1, e2) -> Double.compare(e2.salary, e1.salary));
        System.out.println("\nSorted by Salary (descending):");
        employees.forEach(System.out::println);
    }

    // ---------------- Part B: Filter & Sort Students ----------------
    private static void filterSortStudents(Scanner sc) {
        List<Student> students = new ArrayList<>();
        System.out.println("\nEnter number of students:");
        int n = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < n; i++) {
            System.out.println("Enter Student " + (i + 1) + " Name:");
            String name = sc.nextLine();
            System.out.println("Enter Marks:");
            double marks = sc.nextDouble();
            sc.nextLine(); // consume newline
            students.add(new Student(name, marks));
        }

        System.out.println("\nStudents scoring above 75% (sorted by marks ascending):");
        students.stream()
                .filter(s -> s.marks > 75)
                .sorted(Comparator.comparingDouble(s -> s.marks))
                .map(s -> s.name)
                .forEach(System.out::println);
    }

    // ---------------- Part C: Product Stream Operations ----------------
    private static void productStreamOperations(Scanner sc) {
        List<Product> products = new ArrayList<>();
        System.out.println("\nEnter number of products:");
        int n = sc.nextInt();
        sc.nextLine();
        for (int i = 0; i < n; i++) {
            System.out.println("Enter Product " + (i + 1) + " Name:");
            String name = sc.nextLine();
            System.out.println("Enter Price:");
            double price = sc.nextDouble();
            sc.nextLine();
            System.out.println("Enter Category:");
            String category = sc.nextLine();
            products.add(new Product(name, price, category));
        }

        // Group by category
        Map<String, List<Product>> grouped = products.stream()
                .collect(Collectors.groupingBy(p -> p.category));
        System.out.println("\nProducts Grouped by Category:");
        grouped.forEach((cat, list) -> System.out.println(cat + ": " + list));

        // Most expensive product per category
        Map<String, Optional<Product>> maxPricePerCategory = products.stream()
                .collect(Collectors.groupingBy(p -> p.category,
                        Collectors.maxBy(Comparator.comparingDouble(p -> p.price))));
        System.out.println("\nMost Expensive Product per Category:");
        maxPricePerCategory.forEach((cat, prod) -> System.out.println(cat + ": " + prod.get()));

        // Average price
        double avgPrice = products.stream()
                .collect(Collectors.averagingDouble(p -> p.price));
        System.out.println("\nAverage Price of All Products: " + avgPrice);
    }
}
