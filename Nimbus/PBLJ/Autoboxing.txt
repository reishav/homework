import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;

// Part B: Student class for Serialization
class Student implements Serializable {
    private static final long serialVersionUID = 1L;
    private int studentID;
    private String name;
    private String grade;

    public Student(int studentID, String name, String grade) {
        this.studentID = studentID;
        this.name = name;
        this.grade = grade;
    }

    @Override
    public String toString() {
        return "StudentID: " + studentID + ", Name: " + name + ", Grade: " + grade;
    }
}

// Part C: Employee class for File Handling
class Employee {
    private int id;
    private String name;
    private String designation;
    private double salary;

    public Employee(int id, String name, String designation, double salary) {
        this.id = id;
        this.name = name;
        this.designation = designation;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Designation: " + designation + ", Salary: " + salary;
    }
}

public class Main {
    private static final String EMPLOYEE_FILE = "employees.txt";

    // ---------------- Part A: Sum of Integers ----------------
    public static void sumIntegers(Scanner sc) {
        ArrayList<Integer> numbers = new ArrayList<>();
        System.out.println("Enter integers (type 'done' to finish):");
        while (true) {
            String input = sc.next();
            if (input.equalsIgnoreCase("done")) break;
            int num = Integer.parseInt(input); // parse string to int
            numbers.add(num); // autoboxing
        }

        int sum = 0;
        for (Integer n : numbers) {
            sum += n; // unboxing
        }

        System.out.println("The sum of the integers is: " + sum);
    }

    // ---------------- Part B: Student Serialization ----------------
    public static void studentSerialization(Scanner sc) {
        String filename = "student.ser";
        System.out.print("Enter Student ID: ");
        int id = sc.nextInt();
        sc.nextLine(); // consume newline
        System.out.print("Enter Name: ");
        String name = sc.nextLine();
        System.out.print("Enter Grade: ");
        String grade = sc.nextLine();

        Student student = new Student(id, name, grade);

        // Serialize
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(filename))) {
            oos.writeObject(student);
            System.out.println("Student object serialized to " + filename);
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Deserialize
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filename))) {
            Student deserialized = (Student) ois.readObject();
            System.out.println("Deserialized Student: " + deserialized);
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    // ---------------- Part C: Employee Management ----------------
    public static void addEmployee(Scanner sc) {
        System.out.print("Enter Employee ID: ");
        int id = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter Name: ");
        String name = sc.nextLine();
        System.out.print("Enter Designation: ");
        String desig = sc.nextLine();
        System.out.print("Enter Salary: ");
        double salary = sc.nextDouble();

        Employee emp = new Employee(id, name, desig, salary);

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(EMPLOYEE_FILE, true))) {
            writer.write(emp.toString());
            writer.newLine();
            System.out.println("Employee added successfully!");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void displayEmployees() {
        try (BufferedReader reader = new BufferedReader(new FileReader(EMPLOYEE_FILE))) {
            String line;
            System.out.println("Employee Records:");
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (FileNotFoundException e) {
            System.out.println("No employee records found yet.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // ---------------- Main Menu ----------------
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n---Combined Menu ---");
            System.out.println("1. Sum of Integers (Autoboxing/Unboxing)");
            System.out.println("2. Student Serialization/Deserialization");
            System.out.println("3. Employee Management (File Handling)");
            System.out.println("0. Exit");
            System.out.print("Enter choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    sumIntegers(sc);
                    break;
                case 2:
                    studentSerialization(sc);
                    break;
                case 3:
                    int empChoice;
                    do {
                        System.out.println("\n--- Employee Menu ---");
                        System.out.println("1. Add Employee");
                        System.out.println("2. Display All Employees");
                        System.out.println("0. Back to Main Menu");
                        System.out.print("Enter choice: ");
                        empChoice = sc.nextInt();
                        sc.nextLine();

                        switch (empChoice) {
                            case 1:
                                addEmployee(sc);
                                break;
                            case 2:
                                displayEmployees();
                                break;
                            case 0:
                                break;
                            default:
                                System.out.println("Invalid choice. Try again.");
                        }
                    } while (empChoice != 0);
                    break;
                case 0:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Try again.");
            }

        } while (choice != 0);

        sc.close();
    }
}
