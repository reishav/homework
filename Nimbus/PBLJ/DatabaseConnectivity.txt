import java.sql.*;
import java.util.*;

// ---------------- Part A: Employee Fetch ----------------
class EmployeeFetch {
    public static void fetchEmployees(String url, String user, String password) {
        try (Connection conn = DriverManager.getConnection(url, user, password);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT EmpID, Name, Salary FROM Employee")) {

            System.out.println("\n--- Employee Records ---");
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("EmpID") +
                        ", Name: " + rs.getString("Name") +
                        ", Salary: " + rs.getDouble("Salary"));
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

// ---------------- Part B: Product CRUD ----------------
class ProductCRUD {
    private Connection conn;
    public ProductCRUD(String url, String user, String password) throws SQLException {
        conn = DriverManager.getConnection(url, user, password);
        conn.setAutoCommit(false);
    }

    public void addProduct(Scanner sc) {
        try {
            System.out.print("Enter Product Name: ");
            String name = sc.nextLine();
            System.out.print("Enter Price: ");
            double price = sc.nextDouble();
            System.out.print("Enter Quantity: ");
            int qty = sc.nextInt();
            sc.nextLine();

            String sql = "INSERT INTO Product (ProductName, Price, Quantity) VALUES (?, ?, ?)";
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, name);
                ps.setDouble(2, price);
                ps.setInt(3, qty);
                ps.executeUpdate();
                conn.commit();
                System.out.println("Product added successfully.");
            }
        } catch (SQLException e) {
            try { conn.rollback(); } catch (SQLException ex) { ex.printStackTrace(); }
            e.printStackTrace();
        }
    }

    public void displayProducts() {
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM Product")) {
            System.out.println("\n--- Product Records ---");
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("ProductID") +
                        ", Name: " + rs.getString("ProductName") +
                        ", Price: " + rs.getDouble("Price") +
                        ", Qty: " + rs.getInt("Quantity"));
            }
        } catch (SQLException e) { e.printStackTrace(); }
    }

    public void updateProduct(Scanner sc) {
        try {
            System.out.print("Enter Product ID to update: ");
            int id = sc.nextInt(); sc.nextLine();
            System.out.print("Enter new Name: ");
            String name = sc.nextLine();
            System.out.print("Enter new Price: ");
            double price = sc.nextDouble();
            System.out.print("Enter new Quantity: ");
            int qty = sc.nextInt(); sc.nextLine();

            String sql = "UPDATE Product SET ProductName=?, Price=?, Quantity=? WHERE ProductID=?";
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, name);
                ps.setDouble(2, price);
                ps.setInt(3, qty);
                ps.setInt(4, id);
                int rows = ps.executeUpdate();
                if (rows > 0) {
                    conn.commit();
                    System.out.println("Product updated successfully.");
                } else {
                    conn.rollback();
                    System.out.println("Product not found.");
                }
            }
        } catch (SQLException e) {
            try { conn.rollback(); } catch (SQLException ex) { ex.printStackTrace(); }
            e.printStackTrace();
        }
    }

    public void deleteProduct(Scanner sc) {
        try {
            System.out.print("Enter Product ID to delete: ");
            int id = sc.nextInt(); sc.nextLine();

            String sql = "DELETE FROM Product WHERE ProductID=?";
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setInt(1, id);
                int rows = ps.executeUpdate();
                if (rows > 0) {
                    conn.commit();
                    System.out.println("Product deleted successfully.");
                } else {
                    conn.rollback();
                    System.out.println("Product not found.");
                }
            }
        } catch (SQLException e) {
            try { conn.rollback(); } catch (SQLException ex) { ex.printStackTrace(); }
            e.printStackTrace();
        }
    }

    public void closeConnection() {
        try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }
    }
}

// ---------------- Part C: Student MVC ----------------
class Student {
    private int studentID;
    private String name;
    private String department;
    private double marks;

    public Student(int studentID, String name, String department, double marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }

    public int getStudentID() { return studentID; }
    public String getName() { return name; }
    public String getDepartment() { return department; }
    public double getMarks() { return marks; }

    public void setName(String name) { this.name = name; }
    public void setDepartment(String department) { this.department = department; }
    public void setMarks(double marks) { this.marks = marks; }

    @Override
    public String toString() {
        return "ID: " + studentID + ", Name: " + name + ", Dept: " + department + ", Marks: " + marks;
    }
}

class StudentController {
    private Connection conn;
    public StudentController(String url, String user, String password) throws SQLException {
        conn = DriverManager.getConnection(url, user, password);
    }

    public void addStudent(Student s) throws SQLException {
        String sql = "INSERT INTO Student (StudentID, Name, Department, Marks) VALUES (?, ?, ?, ?)";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, s.getStudentID());
            ps.setString(2, s.getName());
            ps.setString(3, s.getDepartment());
            ps.setDouble(4, s.getMarks());
            ps.executeUpdate();
            System.out.println("Student added successfully.");
        }
    }

    public void displayStudents() throws SQLException {
        String sql = "SELECT * FROM Student";
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            System.out.println("\n--- Student Records ---");
            while (rs.next()) {
                System.out.println("ID: " + rs.getInt("StudentID") +
                        ", Name: " + rs.getString("Name") +
                        ", Dept: " + rs.getString("Department") +
                        ", Marks: " + rs.getDouble("Marks"));
            }
        }
    }

    public void updateStudent(Student s) throws SQLException {
        String sql = "UPDATE Student SET Name=?, Department=?, Marks=? WHERE StudentID=?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, s.getName());
            ps.setString(2, s.getDepartment());
            ps.setDouble(3, s.getMarks());
            ps.setInt(4, s.getStudentID());
            int rows = ps.executeUpdate();
            if (rows > 0) System.out.println("Student updated successfully.");
            else System.out.println("Student not found.");
        }
    }

    public void deleteStudent(int studentID) throws SQLException {
        String sql = "DELETE FROM Student WHERE StudentID=?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, studentID);
            int rows = ps.executeUpdate();
            if (rows > 0) System.out.println("Student deleted successfully.");
            else System.out.println("Student not found.");
        }
    }

    public void closeConnection() {
        try { conn.close(); } catch (SQLException e) { e.printStackTrace(); }
    }
}

// ---------------- Main Application ----------------
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        String url = "jdbc:mysql://localhost:3306/your_database";
        String user = "root";
        String password = "password";

        int choice = -1;

        try {
            ProductCRUD productCRUD = new ProductCRUD(url, user, password);
            StudentController studentController = new StudentController(url, user, password);

            do {
                System.out.println("\n--- Unified JDBC Menu ---");
                System.out.println("1. Fetch Employee Records");
                System.out.println("2. Product CRUD Operations");
                System.out.println("3. Student Management (MVC)");
                System.out.println("0. Exit");
                System.out.print("Enter choice: ");

                if (!sc.hasNextInt()) {
                    sc.next();
                    System.out.println("Invalid input. Enter a number:");
                    continue;
                }
                choice = sc.nextInt(); sc.nextLine();

                switch (choice) {
                    case 1:
                        EmployeeFetch.fetchEmployees(url, user, password);
                        break;
                    case 2:
                        productMenu(productCRUD, sc);
                        break;
                    case 3:
                        studentMenu(studentController, sc);
                        break;
                    case 0:
                        System.out.println("Exiting...");
                        break;
                    default:
                        System.out.println("Invalid choice!");
                }

            } while (choice != 0);

            productCRUD.closeConnection();
            studentController.closeConnection();

        } catch (SQLException e) {
            e.printStackTrace();
        }

        sc.close();
    }

    // ---------------- Product Menu ----------------
    private static void productMenu(ProductCRUD crud, Scanner sc) {
        int ch;
        do {
            System.out.println("\n--- Product Menu ---");
            System.out.println("1. Add Product");
            System.out.println("2. Display Products");
            System.out.println("3. Update Product");
            System.out.println("4. Delete Product");
            System.out.println("0. Back to Main Menu");
            System.out.print("Enter choice: ");
            ch = sc.nextInt(); sc.nextLine();

            switch (ch) {
                case 1 -> crud.addProduct(sc);
                case 2 -> crud.displayProducts();
                case 3 -> crud.updateProduct(sc);
                case 4 -> crud.deleteProduct(sc);
                case 0 -> System.out.println("Returning to Main Menu...");
                default -> System.out.println("Invalid choice!");
            }
        } while (ch != 0);
    }

    // ---------------- Student Menu ----------------
    private static void studentMenu(StudentController ctrl, Scanner sc) {
        int ch;
        do {
            System.out.println("\n--- Student Menu ---");
            System.out.println("1. Add Student");
            System.out.println("2. Display Students");
            System.out.println("3. Update Student");
            System.out.println("4. Delete Student");
            System.out.println("0. Back to Main Menu");
            System.out.print("Enter choice: ");
            ch = sc.nextInt(); sc.nextLine();

            try {
                switch (ch) {
                    case 1 -> {
                        System.out.print("Enter ID: "); int id = sc.nextInt(); sc.nextLine();
                        System.out.print("Enter Name: "); String name = sc.nextLine();
                        System.out.print("Enter Department: "); String dept = sc.nextLine();
                        System.out.print("Enter Marks: "); double marks = sc.nextDouble(); sc.nextLine();
                        ctrl.addStudent(new Student(id, name, dept, marks));
                    }
                    case 2 -> ctrl.displayStudents();
                    case 3 -> {
                        System.out.print("Enter ID to update: "); int uid = sc.nextInt(); sc.nextLine();
                        System.out.print("Enter new Name: "); String uname = sc.nextLine();
                        System.out.print("Enter new Department: "); String udept = sc.nextLine();
                        System.out.print("Enter new Marks: "); double umarks = sc.nextDouble(); sc.nextLine();
                        ctrl.updateStudent(new Student(uid, uname, udept, umarks));
                    }
                    case 4 -> {
                        System.out.print("Enter ID to delete: "); int did = sc.nextInt(); sc.nextLine();
                        ctrl.deleteStudent(did);
                    }
                    case 0 -> System.out.println("Returning to Main Menu...");
                    default -> System.out.println("Invalid choice!");
                }
            } catch (SQLException e) { e.printStackTrace(); }

        } while (ch != 0);
    }
}
