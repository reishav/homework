/**
 * Title: Middleware Implementation for Logging and Bearer Token Authentication
 * Objective: Implement global logging middleware and route-specific
 * authentication middleware for an Express.js server.
 * * To run this code:
 * 1. Ensure you have Node.js and npm installed.
 * 2. Run 'npm init -y' to create a package.json file.
 * 3. Run 'npm install express' to install the Express framework.
 * 4. Save this code as 'app.js'. // Renamed from server.js
 * 5. Run 'node app.js' in your terminal.
 */
const express = require('express');
const app = express();
const PORT = 3000;
const VALID_TOKEN = 'mysecrettoken';

// =================================================================
// 1. Logging Middleware (Global)
// =================================================================

/**
 * Logs the request method, URL, and timestamp for every incoming request.
 * Applied globally using app.use() below.
 */
function requestLogger(req, res, next) {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] ${req.method} ${req.url}`);
    // MUST call next() to pass control to the next middleware/route handler
    next(); 
}

// Apply the logging middleware globally to all routes
app.use(requestLogger);

// =================================================================
// 2. Authentication Middleware (Route-Specific)
// =================================================================

/**
 * Checks for a valid Bearer token in the Authorization header.
 * Only allows access if the token matches VALID_TOKEN.
 */
function authenticateToken(req, res, next) {
    // 1. Check for the Authorization header
    const authHeader = req.headers['authorization'];
    
    // Authorization header structure: "Bearer <token>"
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        console.log('Authentication failed: Missing or malformed header.');
        return res.status(401).json({ message: "Authorization header missing or incorrect" });
    }

    // 2. Extract the token (everything after "Bearer ")
    const token = authHeader.split(' ')[1];

    // 3. Validate the token
    if (token === VALID_TOKEN) {
        // Token is valid, continue to the protected route handler
        console.log('Authentication successful.');
        next();
    } else {
        // Token is invalid
        console.log(`Authentication failed: Invalid token received: ${token}`);
        return res.status(401).json({ message: "Invalid Bearer token provided" });
    }
}

// =================================================================
// 3. Route Definitions
// =================================================================

// Public Route (Accessible without authentication)
app.get('/public', (req, res) => {
    // The requestLogger middleware ran before this
    res.status(200).send("This is a public route. No authentication required.");
});

// Protected Route (Requires the authenticateToken middleware)
// The middleware is inserted right before the final route handler
app.get('/protected', authenticateToken, (req, res) => {
    // Both requestLogger and authenticateToken middlewares ran before this
    res.status(200).send("You have accessed a protected route with a valid Bearer token!");
});

// =================================================================
// 4. Server Start
// =================================================================

app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
    console.log('Try accessing:');
    console.log(` - Public route: http://localhost:${PORT}/public`);
    console.log(` - Protected route (access denied without token): http://localhost:${PORT}/protected`);
    console.log(` - Protected route (access granted with token: ${VALID_TOKEN})`);
});
