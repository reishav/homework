-- =========================================================
-- Setup: Create StudentEnrollments Table
-- =========================================================
DROP TABLE IF EXISTS StudentEnrollments;

CREATE TABLE StudentEnrollments (
    enrollment_id INT PRIMARY KEY,
    student_name VARCHAR(100) NOT NULL,
    course_id VARCHAR(10) NOT NULL,
    enrollment_date DATE NOT NULL,
    UNIQUE(student_name, course_id)   -- Prevent duplicate enrollments
);

-- Seed data
INSERT INTO StudentEnrollments VALUES
(1, 'Ashish', 'CSE101', '2024-07-01'),
(2, 'Smaran', 'CSE102', '2024-07-01'),
(3, 'Vaibhav', 'CSE101', '2024-07-01');

-- =========================================================
-- Part A: Prevent Duplicate Enrollments Using Locking
-- =========================================================
-- First insert succeeds
INSERT INTO StudentEnrollments VALUES
(4, 'Ashish', 'CSE102', '2024-07-02');

-- Second insert with same (student_name, course_id) will fail
-- Uncomment to test error
-- INSERT INTO StudentEnrollments VALUES
-- (5, 'Ashish', 'CSE102', '2024-07-03');

-- =========================================================
-- Part B: Row-Level Locking with SELECT FOR UPDATE
-- =========================================================
-- Simulate User A
START TRANSACTION;
SELECT * 
FROM StudentEnrollments
WHERE student_name = 'Ashish' AND course_id = 'CSE101'
FOR UPDATE;
-- (Row is now locked. Do NOT COMMIT yet to simulate User A holding the lock)

-- In another session (simulate User B):
-- START TRANSACTION;
-- UPDATE StudentEnrollments
-- SET enrollment_date = '2024-07-05'
-- WHERE student_name = 'Ashish' AND course_id = 'CSE101';
-- (This will be BLOCKED until User A commits/rollbacks)

-- Commit User A to release lock
COMMIT;

-- =========================================================
-- Part C: Demonstrating Locking Preserving Consistency
-- =========================================================
-- User A updates first
START TRANSACTION;
SELECT * 
FROM StudentEnrollments
WHERE student_name = 'Ashish' AND course_id = 'CSE101'
FOR UPDATE;
UPDATE StudentEnrollments
SET enrollment_date = '2024-07-10'
WHERE student_name = 'Ashish' AND course_id = 'CSE101';
COMMIT;

-- Now User B updates after User A committed
START TRANSACTION;
SELECT * 
FROM StudentEnrollments
WHERE student_name = 'Ashish' AND course_id = 'CSE101'
FOR UPDATE;
UPDATE StudentEnrollments
SET enrollment_date = '2024-07-15'
WHERE student_name = 'Ashish' AND course_id = 'CSE101';
COMMIT;

-- Final Check
SELECT * FROM StudentEnrollments;
